import express from "express";
import mysql from "mysql";
import cors from "cors";
import bcrypt from "bcrypt"; // For password hashing

const app = express();
app.use(cors());
app.use(express.json());

const db = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "root",
  database: "peace",
});

// Handle database connection errors
db.connect((err) => {
  if (err) {
    console.error("Error connecting to database:", err);
  } else {
    console.log("Connected to database");
  }
});

// Helper function for hashing passwords
const hashPassword = async (password) => {
  const saltRounds = 10;
  return await bcrypt.hash(password, saltRounds);
};

// Common authentication function
const authenticateUser = async (tableName, email, password, res) => {
  try {
    const sql = "SELECT * FROM ?? WHERE email = ?";
    db.query(sql, [tableName, email], async (err, results) => {
      if (err) {
        console.error("Database error:", err);
        return res.status(500).json({ error: "Internal Server Error" });
      }
      if (results.length === 0) {
        return res.status(404).json({ error: "User not found" });
      }

      const user = results[0];
      const storedPassword = user.password;

      const passwordMatch = await bcrypt.compare(password, storedPassword);
      if (passwordMatch) {
        const userData = {
          firstName: user.firstName,
          lastName: user.lastName,
          email: user.email,
          dob: user.dob,
          gender: user.gender,
          // Add other user data as needed
        };
        return res
          .status(200)
          .json({ message: "Authentication successful", userData });
      } else {
        return res.status(401).json({ error: "Invalid credentials" });
      }
    });
  } catch (error) {
    console.error("Authentication error:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
};

// Routes
app.get("/user", (req, res) => {
  const sql = "SELECT * FROM usernew";
  db.query(sql, (err, result) => {
    if (err) {
      console.error("Database error:", err);
      return res.status(500).json({ error: "Internal Server Error" });
    }
    return res.json(result);
  });
});

app.get("/counselor", (req, res) => {
  const sql = "SELECT * FROM counselor";
  db.query(sql, (err, result) => {
    if (err) {
      console.error("Database error:", err);
      return res.status(500).json({ error: "Internal Server Error" });
    }
    return res.json(result);
  });
});

app.post("/userFormData", async (req, res) => {
  const sql =
    "INSERT INTO usernew (`firstName`, `lastName`, `gender`, `dob`,`email`, `medicalHistory`, `password`) VALUES (?, ?, ?, ?, ?, ?, ?);";

  const hashedPassword = await hashPassword(req.body.password);
  const values = [
    req.body.firstName,
    req.body.lastName,
    req.body.gender,
    req.body.dob,
    req.body.email,
    req.body.medicalHistory,
    hashedPassword,
  ];

  db.query(sql, values, (err, result) => {
    if (err) {
      console.error("Database error:", err);
      return res.status(500).json({ error: "Internal Server Error" });
    }
    return res.json(result);
  });
});

app.post("/counselorFormData", async (req, res) => {
  const sql =
    "INSERT INTO counselor (`firstName`, `lastName`, `email`, `areaofexperties`,`yearsofexperience`, `password`) VALUES (?, ?, ?, ?, ?, ?);";

  const hashedPassword = await hashPassword(req.body.password);
  const values = [
    req.body.firstName,
    req.body.lastName,
    req.body.email,
    req.body.areaofexperties,
    req.body.yearsofexperience,
    hashedPassword,
  ];

  db.query(sql, values, (err, result) => {
    if (err) {
      console.error("Database error:", err);
      return res.status(500).json({ error: "Internal Server Error" });
    }
    return res.json(result);
  });
});

app.get("/read/:id", (req, res) => {
  const sql = "SELECT * FROM student WHERE sid=?";
  const id = req.params.id;
  db.query(sql, [id], (err, result) => {
    if (err) {
      console.error("Database error:", err);
      return res.status(500).json({ error: "Internal Server Error" });
    }
    return res.json(result);
  });
});

app.post("/userauth", async (req, res) => {
  const { email, password } = req.body;
  authenticateUser("usernew", email, password, res); // Your existing authentication logic
});

// // Modify your existing /userauth endpoint to retrieve user data from the database
// app.post("/userauth", async (req, res) => {
//   const { email, password } = req.body;
//   authenticateUser("usernew", email, password, res); // Your existing authentication logic

//   // Inside the authenticateUser function, upon successful authentication:
//   // Assuming you have the user data available in the user object
//   const userData = {
//     firstName: user.firstName,
//     lastName: user.lastName,
//     email: user.email,
//     dob: user.dob,
//     gender: user.gender,

//     // Add other user data as needed
//   };

//   // Return the user data along with the "Authentication successful" message
//   return res
//     .status(200)
//     .json({ message: "Authentication successful", userData });
// });

app.post("/counselorauth", (req, res) => {
  const { email, password } = req.body;
  authenticateUser("counselor", email, password, res);
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`App is running on port ${PORT}`);
});
